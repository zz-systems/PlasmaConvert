__stack_size = 0x80 * 4;

MEMORY
	{
	intram (rwx) : ORIGIN = 0, LENGTH = 4K
	}

SECTIONS
{
	. = 0x00;
	VECTORTABLE : 
		{ 
		*(.vector.reset);
		. = 0x10;
		*(.vector.interrupt);
		. = 0x20;
		}

	. = ALIGN(4);
	.text : 
		{ 
		*(.text) 
		*(.text*) 
		}

	/*Hier liegen data und sdata zum Kopieren*/
	
	INITDATA : {
		__rom_data_start = .;
		. += __data_size;
		__rom_sdata_start = .;	
		. += __sdata_size;
	}

	. = ALIGN(4);
	.data : AT( __rom_data_start ) { 
		__data_start = .;
		*(.data) 
		*(.data*)
		__data_end = .;
	}
	__data_size = __data_end - __data_start;
	
	. = ALIGN(4);
	.sdata : AT( __rom_sdata_start ) { 
		__sdata_start = .;	
		*(.sdata) 
		*(.sdata*)
		__sdata_end = .;
	}
	__sdata_size = __sdata_end - __sdata_start;
	
	. = ALIGN(4);
	__gp = .;	
	.sbss : { 
		__sbss_start = .;
		*(.sbss) 
		*(.sbss.*)
		*(scommon)
		*(.scommon)
		*(.scommon*)
		__sbss_end = .;
	}
	__sbss_size = __sbss_end - __sbss_start;
	
	. = ALIGN(4);
	.bss : { 
		__bss_start = .;
		*(.bss) 
		*(common)
		*(.common)
		__bss_end = .;
	}
	__bss_size = __bss_end - __bss_start;

	. = ALIGN(4);
	STACK : { 
		__stack_start = .;
		. += __stack_size;
		__stack_end = .;
	}

	
	. = ALIGN(4);
	__end = .;
	__heap_start = .;
	
	/DISCARD/ : {
		*(.reginfo)
		*(.MIPS*)
		*(.pdr)
		*(.mdebug*)
		*(.comment)
		*(.gnu)


	}
}
ENTRY(_reset_vector)

